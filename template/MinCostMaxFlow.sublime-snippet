<snippet>
	<content><![CDATA[
//  Works for negative costs, but does not work for negative cycles
//  Complexity: O(min(E^2 *V log V, E logV * flow))
//  To obtain the actual flow values, look at all edges with flow > 0
//  1-indexed g

struct edge
{
    int to, flow, cap, cost, rev;
};

struct MinCostMaxFlow
{
    int nodes;
    vector<int> prio, curflow, prevedge, prevnode, q, pot;
    vector<bool> inqueue;
    vector<vector<edge> > g;
    MinCostMaxFlow() {}

    MinCostMaxFlow(int n): nodes(n+1), prio(n+1, 0), curflow(n+1, 0),
    prevedge(n+1, 0), prevnode(n+1, 0), q(n+1, 0), pot(n+1, 0), inqueue(n+1, 0), g(n+1) {}

    void addEdge(int source, int to, int capacity, int cost)
    {
        edge a = {to, 0, capacity, cost, (int)g[to].size()};
        edge b = {source, 0, 0, -cost, (int)g[source].size()};
        g[source].push_back(a);
        g[to].push_back(b);
    }

    void bellman_ford(int source, vector<int> &dist)
    {
        fill(dist.begin(), dist.end(), INT_MAX);
        dist[source] = 0;
        int qt=0;
        q[qt++] = source;
        for(int qh=0;(qh-qt)%nodes!=0;qh++)
        {
            int u = q[qh%nodes];
            inqueue[u] = false;
            for(auto &e : g[u])
            {
                if(e.flow >= e.cap)
                    continue;
                int v = e.to;
                int newDist = dist[u] + e.cost;
                if(dist[v] > newDist)
                {
                    dist[v] = newDist;
                    if(!inqueue[v])
                    {
                        inqueue[v] = true;
                        q[qt++ % nodes] = v;
                    }
                }
            }
        }
    }

    pair<int, int> minCostFlow(int source, int dest, int maxflow)
    {
        bellman_ford(source, pot);
        int flow = 0;
        int flow_cost = 0;
        while(flow < maxflow)
        {
            priority_queue<pair<int, int>, vector<pair<int, int> >, greater<pair<int, int> > > q;
            q.push({0, source});
            fill(prio.begin(), prio.end(), INT_MAX);
            prio[source] = 0;
            curflow[source] = INT_MAX;
            while(!q.empty())
            {
                int d = q.top().first;
                int u = q.top().second;
                q.pop();
                if(d != prio[u])
                    continue;
                for(int i=0;i<g[u].size();i++)
                {
                    edge &e=g[u][i];
                    int v = e.to;
                    if(e.flow >= e.cap)
                        continue;
                    int newPrio = prio[u] + e.cost + pot[u] - pot[v];
                    if(prio[v] > newPrio)
                    {
                        prio[v] = newPrio;
                        q.push({newPrio, v});
                        prevnode[v] = u;
                        prevedge[v] = i;
                        curflow[v] = min(curflow[u], e.cap - e.flow);
                    }
                }
            }
            if(prio[dest] == INT_MAX)
                break;
            for(int i=0;i<nodes;i++)
                pot[i]+=prio[i];
            int df = min(curflow[dest], maxflow - flow);
            flow += df;
            for(int v=dest;v!=source;v=prevnode[v])
            {
                edge &e = g[prevnode[v]][prevedge[v]];
                e.flow += df;
                g[v][e.rev].flow -= df;
                flow_cost += df * e.cost;
            }
        }
        return {flow, flow_cost};
    }
};

//  Assign N task to N employee: https://cses.fi/problemset/result/3494969/
//  Finding path of max flows: https://cses.fi/problemset/result/3498832/



]]></content>
	<!-- Optional: Set a tabTrigger to define how to trigger the snippet -->
	<tabTrigger>MinCostMaxFlow</tabTrigger>
	<!-- Optional: Set a scope to limit where the snippet will trigger -->
	<scope>source.c++</scope>
</snippet>
